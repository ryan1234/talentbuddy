Challenge: Trigger words
Let’s consider a context that was extracted during the previous challenge:
Did you read -TITLE- on Kindle yesterday?
In this example, "read" and "Kindle" are trigger words. These types of words signal that there’s a high likelihood of finding a book title in their vicinity.
A trigger word is a token that has two properties:
it is frequent in the list of extracted contexts
it is specific to the field of books
In order to identify trigger words we are going to assign a weight to each token. Let’s call this weight: IDF ("inverse document frequency").
IDF(token) = log(N / num_contexts(token))
N represents the total number of contexts we are working with
num_contexts(token) represents the number of contexts that contain the given token
log() represents the natural logarithm (base E) of a number.
Given a list of contexts and an integer number M
Your task is to
write a function that prints to the standard output (stdout) the first M tokens having the highest IDF value (one per line)
if there are more tokens having the same IDF value they must be sorted in lexicographical order
Note that your function will receive the following arguments:
contexts
which is an array of strings giving a list of contexts
each context is a string of tokens containing the keyword "-TITLE-" (separated by spaces) which delimits the left side of the context and the right side of it
m
which is an integer number giving the number mentioned above
Data constraints
the length of the contexts array will not exceed 1000
the length of a context string will not exceed 1000 characters
Efficiency constraints
your function is expected to print the requested result and return in less than 2 seconds
Example
Input	Output
contexts: "to read -TITLE- while in", "to buy -TITLE- while in school", "buy -TITLE-"
m: 2
read
school
Explanation
In this example we are working with 3 contexts, so N = 3
IDF("read") = log(3/1) = 1.09
IDF("buy") = log(3/2) = 0.40
