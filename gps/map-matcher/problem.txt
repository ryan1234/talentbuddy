Challenge: Map matcher
It’s now time to implement a fully-functional map-matching algorithm.

Let’s define a path as a set of coordinates and corresponding timestamps that a moving car has received from a GPS satellite in a period of time. We are going to represent a path as a string with the following structure: "x1,y1,t1;...;xn,yn,tn"
a pair (xi, yi, ti) represents the position’s coordinates (xi, yi) recorded at timestamp ti
for example: "5,5,100;7,5,110;10,5,130"
Given a city map (a set of street segments) and a set of paths
Your task is to
write a function that matches the GPS positions from the paths to actual positions of the car on the city streets
for each path your function must print to standard output (stdout) on a separate line the last actual position of the car
Note that your function will receive the following arguments:
segments
which is an array of strings with the following format: "x1,y1,x2,y2" where (x1, y1) and (x2,y2) are the coordinates that define a street segment
paths
which is an array of paths with the format specified above
Data constraints
the number of segments will not exceed 1,000
the number of recordings will not exceed 1,000
a recording will not have more than 100 positions
the timestamps are given as unix timestamps, measured in seconds
1 distance unit on the map represents 25 meters
for example, the distance between (0,0) and (2,0) is 50m
Efficiency constraints
your function is expected to print the result in less than 2 seconds
Example
Input	Output
segments: "1,1,3,1", "3,1,3,3", "3,1,5,1"
paths: "1,1,10;2,1.5,15;2.5,2.5,20", "1,1,10;2,1.5,15;3,1.5,20;4.2,1.5,25"
3,2.5
4.2,1
Explanation
A matched position is considered correct if it is within a maximum distance ε from where it should have been matched.
This type of problem cannot be solved with 100% accuracy. Because of this, at least 25% of the matches must be correct for a test to pass.
